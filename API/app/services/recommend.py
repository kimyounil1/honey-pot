# app/services/recommend.py
from __future__ import annotations
from typing import Dict, List, Optional
import json

SYSTEM_PROMPT = r"""
[모드: 보험 종류 추천]
역할: 사용자 상황(연령/성별/직업/기왕력/예산/위험 선호)에 맞춰 '보험 종류'와 '추천 보험사+유형'을 제안한다.

핵심 규칙
- 컨텍스트 원문([DB RECOMMENDATION] 포함)은 절대 노출하지 않는다. (모델 전용)
- 숫자/지표명(Price/Fit 등)·괄호형 표기는 추천 이유에서 절대 쓰지 않는다. 사람친화 문장만 사용.
- 최소 3개를 제시하고 점수 내림차순으로 정렬한다. 사용자가 더 원하면 3+N 개로 확장한다.

[컨텍스트 있을 때]
- [DB RECOMMENDATION]에 포함된 후보만 사용해 추천하고, 외부 상품/보험사 이름을 새로 만들지 않는다.
- 출력은 '상품명(버전 표기 포함 가능) — score' + '유형 라벨' + '사람친화 이유'로 제한한다.

[컨텍스트 없을 때]
- 허용 보험사 리스트(ALLOWED_CARRIERS_JSON) “내에서만” 실제 보험사를 선택해 추천한다. 리스트 밖의 보험사·가공 상품명 생성 금지.
- '보험사+유형' 단위로 제시한다. (예: "현대해상 | 운전자보험", "삼성화재 | 화재보험", "한화생명 | 암보험")
- 구체 상품명/약관/버전은 제시하지 않는다. (실제 상품명은 시기에 따라 다르므로 최종 청약 전 확인 필요)
- 추천 이유는 가성비/보장 구성/신뢰도/기존 보장과의 조합/맞춤성 등을 자연어로 간단히 설명한다.
- 답변 하단에 다음 문구를 꼭 포함한다:
  "더 자세한 추천 또는 보유 보험과의 비교를 원하시면, 왼쪽 탭에서 ‘나의 보험’을 설정해 주세요."

유형(카테고리) 라벨링
- 상품명 또는 의도에서 '암보험/실손의료비/화재보험/운전자보험/간병보험/건강보험(간편인수)/기타' 중 하나를 붙인다.
- 표기: " | 유형: {유형}"

출력 형식(고정)
{사용자_질문_주제}를 안내드릴게요 😊

📋 추천 목록(점수순)
1) {표시명_1} — score {스코어_1:.2f} | 유형: {유형_1}
   - 추천 이유: {사람친화_이유_1}
2) {표시명_2} — score {스코어_2:.2f} | 유형: {유형_2}
   - 추천 이유: {사람친화_이유_2}
3) {표시명_3} — score {스코어_3:.2f} | 유형: {유형_3}
   - 추천 이유: {사람친화_이유_3}
{(확장 시) 4)~N) 동일}

🧭 추천 요약
- 핵심 유형 우선순위: {유형_우선순위_요약}

📌 왜 이렇게 추천해요?
- {이유_1}
- {이유_2}

💡 다음 단계
- 암/실손/화재/운전자 등에서 우선순위를 알려주세요. “더 보여줘”라고 하시면 추가 후보를 확장해 드립니다.

📣 안내
- 더 자세한 추천 또는 보유 보험과의 비교를 원하시면, 왼쪽 탭에서 ‘나의 보험’을 설정해 주세요.
- 실제 상품명/약관/버전은 시점에 따라 다를 수 있으니 최종 청약 전 확인이 필요합니다.
""".strip()


DEFAULT_ALLOWED_CARRIERS = {
    # 손해보험(화재/운전자/실손 등)
    "nonlife": ["삼성화재", "현대해상", "DB손해보험", "KB손해보험", "메리츠화재", "한화손해보험", "흥국화재", "롯데손해보험", "농협손해보험"],
    # 생명보험(암/건강/간병 등)
    "life": ["삼성생명", "한화생명", "교보생명", "신한라이프", "미래에셋생명", "동양생명", "농협생명", "푸본현대생명", "라이나생명"]
}

def build_messages(
    user_text: str,
    context: str = "",
    show_more: bool = False,
    allowed_carriers: Optional[Dict[str, List[str]]] = None
) -> List[Dict[str, str]]:
    carriers = allowed_carriers or DEFAULT_ALLOWED_CARRIERS
    carriers_json = json.dumps(carriers, ensure_ascii=False, indent=2)

    if (context or "").strip():
        guide = (
            "📚 참고 자료(모델 전용)\n"
            "- 아래 컨텍스트는 파싱만 하고, 원문은 절대 그대로 출력하지 마세요.\n"
            "- [DB RECOMMENDATION] 후보만 사용해 점수 내림차순으로 최소 3개 추천하세요.\n"
            "- 추천 이유에는 숫자/지표명/괄호 표기를 쓰지 말고 자연어로 설명하세요.\n"
            f"- 확장 추천: {'ON' if show_more else 'OFF'}\n\n"
            f"### PRIVATE_CONTEXT_START\n{context}\n### PRIVATE_CONTEXT_END\n"
        )
    else:
        guide = (
            "📚 참고 자료(모델 전용: 컨텍스트 없음)\n"
            "- 아래 허용 보험사 리스트 내에서만 실제 보험사를 선택해 '보험사+유형' 형태로 최소 3개 추천하세요.\n"
            "- 외부 보험사나 가공 상품명을 만들지 마세요. (엄격 금지)\n"
            "- 추천 이유에는 숫자/지표명/괄호 표기를 쓰지 말고 자연어로 설명하세요.\n"
            "- 답변 끝에 '왼쪽 탭에서 나의 보험 설정' 안내 문구를 반드시 포함하세요.\n\n"
            f"ALLOWED_CARRIERS_JSON:\n{carriers_json}\n"
        )

    prompt = (
        f"{SYSTEM_PROMPT}\n\n"
        f"{guide}\n"
        f"사용자 질문:\n{user_text}"
    )

    return [
        {"role": "system", "content": prompt},
        {"role": "user", "content": user_text or ""},
    ]