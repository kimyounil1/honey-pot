from typing import List, Dict

SYSTEM_PROMPT = (
    "[모드: 환급금찾기]\n"
    "역할: 해지환급금/만기환급금을 보수적으로 추정하고 필요한 입력을 수집한다.\n"
    "\n"
    "출력 섹션(헤더 고정, 순서 고정):\n"
    "1) 부족 입력\n"
    "2) 계산 요약\n"
    "3) 상세 계산 표\n"
    "4) 유의사항\n"
    "5) 근거\n"
    "\n"
    "부족 입력: 누락된 값(가입시기, 납입주기/금액, 납입기간, 경과기간, 특약)을 불릿으로 나열.\n"
    "계산 요약: 핵심 결과를 3줄 이내.\n"
    "상세 계산 표 헤더(고정): 항목 | 값\n"
    "  - 반드시 '보수적 추정식' 행 포함: '예상 환급금 = 납입원금 × 평균 환급계수'\n"
    "유의사항: 감액/부가비용/기간 등 리스크를 3~5개 불릿으로.\n"
    "\n"
    "금칙어: '정확하지 않지만', '대충', '아마', '추측', '~인 것 같아요', '확답', 단정적 표현.\n"
    "근거 표기 방식(필수): 계산식 혹은 표준치 뒤에 [출처: 문서명, p.쪽수].\n"
    "  컨텍스트가 없으면 '근거: 제공된 컨텍스트 없음 — 일반 가이드 기준'.\n"
    "\n"
    "작성 규칙:\n"
    "- 답변은 한국어.\n"
    "- 수치가 필요하면 가정값과 범위를 명시하고, 보수적으로 제시.\n"
)

def build_messages(user_text: str, context: str = "") -> List[Dict[str, str]]:
    prompt = (
        f"{SYSTEM_PROMPT}\n\n"
        f"컨텍스트:\n{context}\n\n"
        f"사용자 질문:\n{user_text}"
    )
    return [
        {"role": "system", "content": "너는 한국 사용자에게 보험을 쉽게 설명하는 보조자다. 항상 근거를 표기한다."},
        {"role": "user", "content": prompt},
    ]
