
services:
  API:
    build:
      context: ./API
      dockerfile: ../docker/fastapi.Dockerfile
    image: myfast:latest
    env_file:
      - ./.env
    environment:
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./API:/src
    ports:
      - 8000:8000
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    
  web:
    build:
      context: ./next-js
      dockerfile: ../docker/next.Dockerfile
    # image: mynext:latest
    env_file:
      - ./.env
    command: npm run dev
    ports:
      - 3000:3000
    volumes:
      - ./next-js:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
    networks:
      - app-network

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postuser
      POSTGRES_PASSWORD: postuser
      POSTGRES_DB: users 
    volumes: 
      - user-data:/var/lib/postgresql/data
      - ./backup.sql:/docker-entrypoint-initdb.d/01-backup.sql:ro
    ports:
      - 5432:5432
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postuser -d users"]
      interval: 5s
      timeout: 5s
      retries: 5

  # paddle-api:
  #   build:
  #     context: ./paddleocr
  #     dockerfile: ../docker/paddle.Dockerfile 
  #   volumes:
  #     - ./paddleocr/app:/app
  #   ports:
  #     - 5000:5000
  #   networks:
  #     - app-network   

volumes:
  user-data: {}

networks:
  app-network: {}
